// External Imports
import "package:flutter/material.dart";

// Project Imports
import "../../content_classes/all_content_classes.dart";
import "creation_tabs.dart";
import "../../utils/style_utils.dart";
import "../../theme/theme_manager.dart";

/* Notifier for when settings changes colour to rebuild. */
final ValueNotifier<int> tabRebuildNotifier = ValueNotifier<int>(0);

class CreateACharacter extends StatefulWidget {
  const CreateACharacter({super.key});

  @override
  MainCreateCharacter createState() => MainCreateCharacter();
}

class MainCreateCharacter extends State<CreateACharacter>
    with AutomaticKeepAliveClientMixin {
  @override
  bool get wantKeepAlive => true;

  // Text editing controllers
  /// Basics 
  TextEditingController nameEnterController = TextEditingController();
  TextEditingController playerNameEnterController = TextEditingController();
  TextEditingController genderEnterController = TextEditingController();
  /// Character group
  TextEditingController groupEnterController = TextEditingController();
  
  static const List<String> tabLabels = [
    "Basics",
    "Race",
    "Class",
    "Background",
    "Ability Scores",
    "ASIs and Feats",
    "Spells",
    "Equipment",
    "Backstory",
    "Finishing up"
  ];

  static const List<String> abilityScores = [
    "Strength",
    "Dexterity",
    "Constitution",
    "Intelligence",
    "Wisdom",
    "Charisma"
  ];

  
  // Stores the widgets generated by class levels
  List<Widget> widgetsInPlay = []; 
  String? levellingMethod;
  String? characterLevel = "1";
  int pointsRemaining = 27;
  List<String> coinTypesSelected = ["Gold"];
  // TODO: Moved featFilters and filteredFeats to AsiFeatTab where they're actually used

  int numberOfRemainingFeatOrASIs = 0;
  bool remainingAsi = false;
  

  // FUTUREPLAN(Implement an experience levelling alternative using these)
  String enteredExperience = "";
  TextEditingController experienceEnterController = TextEditingController();
  
  // FUTUREPLAN(Implement a better skill proficiency section using skillProficienciesMap and adding a second field then delete this)
  List<String> skillProficiencies = [];

  Character character = Character.createDefault();

  int get charLevel {
    return int.parse(characterLevel ?? "1");
  }

  bool get canCreateCharacter {
    return (pointsRemaining == 0 &&
      numberOfRemainingFeatOrASIs == 0 &&
      !remainingAsi &&
      charLevel <= character.classList.length &&
      character.chosenAllEqipment && 
      character.chosenAllSpells
    );
  }

  @override
  Widget build(
    BuildContext context,
  ) {
    super.build(context);

    return ValueListenableBuilder<int>(
      valueListenable: tabRebuildNotifier,
      builder: (context, value, child) {return DefaultTabController(
      length: tabLabels.length,
      child: Scaffold(
        backgroundColor: ThemeManager.instance.currentScheme.backgroundColour,
        appBar: AppBar(
          foregroundColor: ThemeManager.instance.currentScheme.textColour,
          backgroundColor: ThemeManager.instance.currentScheme.backingColour,
          title: const Center(
            child: Text(
              textAlign: TextAlign.center,
              "Create a character",
              style: TextStyle(fontSize: 40, fontWeight: FontWeight.w700),
            ),
          ),
          bottom: TabBar(
            tabs: tabLabels.map((e) => StyleUtils.tabLabel(e)).toList(),
            indicatorColor: ThemeManager.instance.currentScheme.textColour,
          ),
        ),
        body: TabBarView(children: [
          // Basics Tab
          BasicsTab(
            character: character,
            levellingMethod: levellingMethod,
            characterLevel: characterLevel,
            nameEnterController: nameEnterController,
            playerNameEnterController: playerNameEnterController,
            genderEnterController: genderEnterController,
            experienceEnterController: experienceEnterController,
            numberOfRemainingFeatOrASIs: numberOfRemainingFeatOrASIs,
            onCharacterChanged: () {
              setState(() {});
            },
            onLevellingMethodChanged: (newMethod) {
              setState(() {
                levellingMethod = newMethod;
              });
            },
            onCharacterLevelChanged: (newLevel) {
              setState(() {
                characterLevel = newLevel;
              });
            },
            onNumberOfRemainingFeatOrASIsChanged: (newCount) {
              setState(() {
                numberOfRemainingFeatOrASIs = newCount;
              });
            },
          ),
          
          // Race Tab
          RaceTab(
            character: character,
            onCharacterChanged: () {
              setState(() {});
            },
          ),

          // Class Tab
          ClassTab(
            character: character,
            charLevel: charLevel,
            characterLevel: characterLevel,
            widgetsInPlay: widgetsInPlay,
            numberOfRemainingFeatOrASIs: numberOfRemainingFeatOrASIs,
            tabRebuildNotifier: tabRebuildNotifier,
            onCharacterChanged: () {
              setState(() {});
            },
            onCharacterLevelChanged: (newLevel) {
              setState(() {
                characterLevel = newLevel;
              });
            },
            onWidgetsInPlayChanged: (newWidgets) {
              setState(() {
                widgetsInPlay = newWidgets;
              });
            },
            onNumberOfRemainingFeatOrASIsChanged: (newCount) {
              setState(() {
                numberOfRemainingFeatOrASIs = newCount;
              });
            },
          ),
          
          // Background Tab
          BackgroundTab(
            character: character,
            onCharacterChanged: () {
              setState(() {});
            },
          ),
          
          // Ability Score Tab
          AbilityScoreTab(
            character: character,
            pointsRemaining: pointsRemaining,
            onPointsRemainingChanged: (newPoints) {
              setState(() {
                pointsRemaining = newPoints;
              });
            },
          ),
                    
          // Ability Score Improvement & Feat selection tab
          AsiFeatTab(
            character: character,
            numberOfRemainingFeatOrASIs: numberOfRemainingFeatOrASIs,
            remainingAsi: remainingAsi,
            widgetsInPlay: widgetsInPlay,
            onCharacterChanged: () {
              setState(() {});
            },
            onRemainingFeatOrASIsChanged: (newCount) {
              setState(() {
                numberOfRemainingFeatOrASIs = newCount;
              });
            },
            onRemainingAsiChanged: (newValue) {
              setState(() {
                remainingAsi = newValue;
              });
            },
            onWidgetsInPlayChanged: (newWidgets) {
              setState(() {
                widgetsInPlay = newWidgets;
              });
            },
          ),

          // Spells Tab
          SpellsTab(
            character: character,
            onCharacterChanged: () {
              setState(() {});
            },
          ),
          
          // Equipment Tab
          EquipmentTab(
            character: character,
            coinTypesSelected: coinTypesSelected,
            onCharacterChanged: () {
              setState(() {});
            },
            onCoinTypesChanged: (newCoinTypes) {
              setState(() {
                coinTypesSelected = newCoinTypes;
              });
            },
          ),
          
          // Backstory Tab
          BackstoryTab(
            character: character,
            onCharacterChanged: () {
              setState(() {
                // This will trigger a rebuild if other tabs need to reflect backstory changes
              });
              // DO NOTHING AS BACKSTORY CHANGES DO NOT AFFECT OTHER TABS
            },
          ),
          
          // Finishing Up Tab
          FinishingUpTab(
            character: character,
            groupEnterController: groupEnterController,
            canCreateCharacter: canCreateCharacter,
            pointsRemaining: pointsRemaining,
            numberOfRemainingFeatOrASIs: numberOfRemainingFeatOrASIs,
            remainingAsi: remainingAsi,
            charLevel: charLevel,
            onCharacterChanged: () {
              setState(() {});
            },
            showCongratulationsDialog: showCongratulationsDialog,
          ),
        ]),
      ),
    );});
  }

  void showCongratulationsDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        content: const Text('Character created!',
            style: TextStyle(
                color: Colors.green,
                fontSize: 50,
                fontWeight: FontWeight.w800)),
        actions: [
          TextButton(
            onPressed: () {
              Navigator.of(context).pop();
            },
            child: const Text('Continue'),
          ),
        ],
      ),
    );
  }
}
